import { Command, flags } from '@oclif/command'
import cli from 'cli-ux'

import { promisify } from 'util'
import path from 'path'
import fs from 'fs'
import mkdirp from 'mkdirp'
import { getNow } from '../utils'

const writeFile = promisify(fs.writeFile)

export default class Make extends Command {
  static description = 'Make a new migration'

  static examples = []

  static flags = {
    'migrations-folder': flags.string({
      default: './db/migrations',
    }),
    help: flags.help({ char: 'h' }),
    // flag with a value (-n, --name=VALUE)
    name: flags.string({ char: 'n', description: 'migration name' }),
  }

  async run() {
    const { args, flags } = this.parse(Make)

    const name: string =
      flags.name ?? ((await cli.prompt('Migration name')) as string)

    if (!/^[a-zA-Z0-9\s]+$/.test(name)) {
      throw new Error(
        'Invalid migration name, must only contain letters, numbers or spaces'
      )
    }

    const sanitizedName = name
      .replace(/\s\s+/g, ' ')
      .replace(/\s/g, '_')
      .toLowerCase()

    const filename = `${getNow()}__${sanitizedName}`

    const upFilename = `${filename}__up.sql`
    const downFilename = `${filename}__down.sql`

    const migrationsFolder = path.join(
      process.cwd(),
      flags['migrations-folder']
    )
    await mkdirp(migrationsFolder)

    const upPath = path.join(flags['migrations-folder'], upFilename)
    const downPath = path.join(flags['migrations-folder'], downFilename)

    console.log(`üìù ./${upPath}`)
    console.log(`üìù ./${downPath}`)

    await writeFile(upPath, '--! autogenerated up file')
    await writeFile(downPath, '--! autogenerated up file')
  }
}
